;;----------------------------------- ID3 -----------------------------------------
;; Library to create Decision Trees by using ID3 algorithm
;;---------------------------------------------------------------------------------

;; It works on datasets given as Dataframes (rows of data with some fixed structure 
;; given by a header). In this version it works only with categorical (not numerical)
;; attributes.

;; Family of nodes that will build the Decision Tree
globals[
aristaActual
categoria
]

breed [ID3:nodes ID3:node]

ID3:nodes-own [
  ID3:node-type ; Types: 
                ;   0 -> Start, 
                ;   1 -> Decision, 
                ;   2 -> Answer
  ID3:value     ; The value in the node depends on the type:
                ;   0 -> Attribute to classify
                ;   1 -> Splitting Attribute 
                ;   2 -> Classification result
  depth         ; For use with LayoutSpace.nls
]

;; Family of links that will build the Decision Tree
directed-link-breed [ID3:links ID3:link]
ID3:links-own [ID3:att_value]

;; Dataframes ar data matrix where the first row is the head. For our ID3, last column is 
;; the attribute to classify.

; Entropy of a list (according to the frequency of their elements)
to-report entropy [l]
  ; Compute the relative frequency of the elements
  let l2 map [ x -> frec x l ] (remove-duplicates l)
  ; Apply entropy to the list of frequencies
  report sum map [ x -> ifelse-value (x = 0)[0][(-1) * x * log x 2] ] l2
end

; Report for relative frequency of an element in a list
to-report frec [el L]
  report (length (filter [ x -> x = el ] L)) / (length L)
end

; Report Relative Entropy of an attribute in a dataframe
to-report entropy-rel [df atr]
  ; Extract the list of attributes from dataframe
  let atrs first df
  ; Extract values of the attribute
  let val  bf (DF:column atr df)
  ; Take the index of the associated column
  let p position atr atrs
  ; Acumulador para calcular la entropia relativa
  let ent-rel 0
  ; Para cada posible valor del atributo:
  foreach remove-duplicates val
  [ x ->
    ; Compute the relative frec of x
    let f frec x val
    ; Take only rows with x in this column, and build a new dataframe with those rows
    let df2 (fput (first df) filter [ y -> (item p y) = x ] (bf df))
    ; Compute the entropy of the last column in this new dataframe
    let ex entropy  bf (DF:column (last atrs) df2)
    ; Accumulate it
    set ent-rel ent-rel + f * ex
  ]
  report ent-rel
end

;; Gain Information in a dataframe for an attribute
to-report GI [df atr]
  let atrs first df
  report (entropy bf (DF:column (last atrs) df)) - (entropy-rel df atr)
end

; Report the attribute with max Gain Information in a dataframe
to-report Max-GI [df]
  let atr1 map [ x -> (list x (GI df x) ) ] (bl first df)
  report first first sort-by [ [x y] -> (last x) > (last y) ] atr1
end

; Report the attribute with max Gain Information Ratio in a dataframe
to-report Max-GR [df]
  let atr1 map [ x -> (list x (ifelse-value ((entropy bf DF:column x df) = 0) [0] [(GI df x) / (entropy bf DF:column x df)])) ] (bl first df)
  report first first sort-by [ [x y] -> (last x) > (last y) ] atr1
end

;; Main procedure to create the Decision Tree with ID3
;;       df : Dataframe
;; Reports the main root node 
;; (later, we can ask this node to evaluate new data)

to-report ID3:ID3 [df att-target]
  let rep nobody

  ; Move the target attribute to the last column  
  let target DF:column att-target df
  set df DF:remove att-target df
  set df DF:add-column att-target df (bf target)

  create-ID3:nodes 1 [
    set ID3:node-type 0
    set ID3:value (last first df)
    create-ID3:link-to (ID3:ID3_aux df) [set ID3:att_value ""]
    set rep self
    set depth 1
  ]
  report rep
end

; ID3 Algorithm recursive.
;  Diferenciate between 
;                   Answer-node (it is classified)
;               and Decision-node (to be classified)
;  Returns the node and, if it is Decision, then it generates the branches
;  and resursively call itself with the new dataframes.
to-report ID3:ID3_aux [df]
  let r nobody
  ;print word (ID3:node-type) (depth)
  
  let finales DF:column (last first df) df
  ifelse ID3:classified? df
  [
    hatch-ID3:nodes 1
    [
      set ID3:node-type 2
      set ID3:value (word last last df)
      set r self
      set depth depth + 1
    ]
  ]
  [
    let mx Max-GI df
    if (profundidad - 1 = depth ) [
      let auxiliar (DF:filter-att DataFrame categoria aristaActual) ;contiene las filas de las categorias truncadas
      set auxiliar remove-item 0 auxiliar ;quito la parte de los nombres q indican de q es cada columna
      let listaProv []
      foreach auxiliar [x -> 
      set listaProv lput (word last x) listaProv ;pongo en una lista provisional el valor de retorno de estas categorias truncadas
      ]
      
      set listaProv sort listaProv ;la ordeno para identificar posteriormente los elementos mas facil
      
      ;cuantas salidas hay
      let listaProvAux lput (item 0 listaProv) listaProv ;aÃ±ado un item mas simplemente para poder hacer el repeat n comodamente ya que da igual, solo quiero saber cuantos tipos de salidas hay
      ;let diferentes 0
      let i 0
      let varDiferentes []
      ;set diferentes diferentes + 1
      ;let diferentesNombre lput (item 0 listaProvAux) listaProvAux
      repeat (length listaProvAux) - 2 [
      set i i + 1 
        if (not member? (item (i + 1) listaProvAux)  varDiferentes) [
        set varDiferentes lput (item (i + 1) listaProvAux) varDiferentes ;veo q valores de retorno diferentes tenemos
        ;set diferentes diferentes + 1
        ;set diferentesNombre lput (item (i + 1) listaProvAux) listaProvAux
        ]
      ]
      let valores []
      let contar 0
      foreach varDiferentes [ x -> 
        set contar (filter [ j -> j = x] listaProv) ; cuento en la lista provisional de antes cuantos de cada valor diferente hay en la lista
        set valores lput contar valores ; meto las cuentas en una lista y vamos a poder identificar los valores ya que tienen el mismo index q varDiferentes
        set contar 0
      ]
      ;print valores
      
      ;cuantas salidas hay
      ;print(varDiferentes)
      ;print(aristaActual)
      hatch-ID3:nodes 1[
      set ID3:node-type 2
      let final ""
      let iter 0
        repeat (length varDiferentes) [
          ;set final (word "|" final (item iter varDiferentes) ": " (length (item iter valores)) "||") ; hago la cadena que mostrare debajo de cada nodo q esta truncado
          set final (word "|" final (item iter varDiferentes) ": " (((length (item iter valores)) * 100 / length (reduce se valores) )) " %" "||") ; hago la cadena que mostrare debajo de cada nodo q esta truncado
          set iter iter + 1
        ]
      set ID3:value final
      set r self
      set depth depth + 1
      ;print(word last last df)
      ]
      report r]
    hatch-ID3:nodes 1
    [
      set ID3:node-type 1
      set ID3:value mx
      set r self
      set categoria mx
      set depth depth + 1
      foreach (remove-duplicates bf (DF:column mx df))
      [ x ->
        set aristaActual x
        create-ID3:link-to (ID3:ID3_aux DF:filter-att df mx x)
        [
          set ID3:att_value x
        ]
      ]
    ]
  ]
  report r
end

; The C4.5 Algorithm can be obtained from standard ID3 by previously transforming the numerical
; attributes to categorical decisions.
to-report ID3:C4.5 [df target-att Num-att]
  set df (ID3:num2att df Num-att)
  report ID3:ID3 df target-att
end


; Reports if a dataframe is classified or not
to-report ID3:classified? [df]
  let clas (last first df)
  let val bf (DF:column clas df)
  let vals length remove-duplicates val
  report ifelse-value (vals = 1) [true] [false]
end

; Format the ID3 network 
to ID3:format
  ask ID3:nodes [
    set shape (item ID3:node-type ["circle" "decision" "square 2"])
    set color (item ID3:node-type (list (red + 1) (blue + 2) (green + 2)))
    set size (item ID3:node-type [3 4 2])
    set label ID3:value
    set label-color black
  ]
  ask ID3:links [
    set color gray + 2
    set label ID3:att_value
    set label-color gray - 2
  ]
end

; Reports to evaluate a Decision Tree on new data
; It must be called from an ID3:node 
to-report ID3:evaluate [datum]
  ifelse ID3:node-type = 0
  [report [ID3:evaluate datum] of one-of out-ID3:link-neighbors]
  [ifelse ID3:node-type = 2
    [report ID3:value]
    [
      let val ID3:value-of ID3:value datum
      let next-branch my-out-ID3:links with [ID3:att_value = val]
      ;show next-branch
      ifelse any? next-branch 
        [
          let next-node [end2] of one-of next-branch
          report [ID3:evaluate datum] of next-node
      ]
      [
        report "ID3:Failure"
      ]
    ]
  ]
end

; Take the value of attribute att in datum dat.
; The structure of d must be: [[att1 v1] [att2 v2] ...]
to-report ID3:value-of [att dat]
  let fil filter [x -> first x = att] dat
  ifelse not empty? fil
  [
    report last first fil
  ]
  [ 
    report "ID3:Failure"
  ]
end

; Transform the attributes from Latt (numerical) into a set of 
; categorical attributes (of the form "att <= val")
to-report ID3:num2att [df Latt]
  foreach Latt [
    att ->
    let vals sort DF:values df att
    foreach vals [
      v -> 
      set df DF:add-calculated-column (word att "<=" v) df [r -> (DF:value att df r <= v)]
    ]
    set df DF:remove att df
  ]
  report df
end

